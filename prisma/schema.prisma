// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// =========================
// Generators & Datasource
// =========================
generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// Enums (gốc)
// =========================
enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

// =========================
// Enums (domain giáo dục 1–1)
// =========================
enum LessonStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum Weekday {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

// =========================
// Auth Core
// =========================
model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique @db.VarChar(500)
  name        String  @db.VarChar(500)
  password    String  @db.VarChar(500)
  phoneNumber String? @db.VarChar(50)
  avatar      String? @db.VarChar(1000)

  // 2FA / bảo mật
  totpSecret String? @db.VarChar(1000)

  status  UserStatus @default(INACTIVE)

  // RBAC
  roleId Int
  role   Role        @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Versioned sessions & tokens
  devices       Device[]
  refreshTokens RefreshToken[]
  // OTP / verification
  verificationCodes VerificationCode[]

  // Audit (self-relations)
  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")

  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  // Opposite relation fields for Permission
  permissionsCreated   Permission[] @relation("PermissionCreatedBy")
  permissionsUpdated   Permission[] @relation("PermissionUpdatedBy")
  permissionsDeleted   Permission[] @relation("PermissionDeletedBy")

  // Opposite relation fields for Role
  rolesCreated   Role[] @relation("RoleCreatedBy")
  rolesUpdated   Role[] @relation("RoleUpdatedBy")
  rolesDeleted   Role[] @relation("RoleDeletedBy")

  // Opposite relation field for TeacherProfile
  teacherProfile TeacherProfile?

  // Opposite relation fields for TeacherProfile audit
  teacherProfilesCreated   TeacherProfile[] @relation("TeacherProfileCreatedBy")
  teacherProfilesUpdated   TeacherProfile[] @relation("TeacherProfileUpdatedBy")
  teacherProfilesDeleted   TeacherProfile[] @relation("TeacherProfileDeletedBy")

  // Opposite relation field for Lesson as student
  lessonsAsStudent Lesson[] @relation("StudentLessons")

  // Opposite relation fields for Lesson audit
  lessonsCreated   Lesson[] @relation("LessonCreatedBy")
  lessonsUpdated   Lesson[] @relation("LessonUpdatedBy")
  lessonsDeleted   Lesson[] @relation("LessonDeletedBy")

  // Opposite relation fields for Package audit
  packagesCreated   Package[] @relation("PackageCreatedBy")
  packagesUpdated   Package[] @relation("PackageUpdatedBy")
  packagesDeleted   Package[] @relation("PackageDeletedBy")

  // Opposite relation field for StudentPackage
  studentPackages   StudentPackage[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Device {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAgent  String
  ip         String
  lastActive DateTime @updatedAt
  createdAt  DateTime @default(now())
  isActive   Boolean  @default(true)

  // 1-n với refresh tokens
  refreshTokens RefreshToken[]
}

model RefreshToken {
  // LƯU Ý: dạng raw token làm @id. Nếu chuyển sang hash, đổi trường & bỏ @unique.
  token     String   @id @db.VarChar(1000)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deviceId  Int
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  userId   Int
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, code, type])
  @@index([expiresAt])
}

// =========================
// RBAC (theo style ecom)
// =========================
model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  module      String     @default("") @db.VarChar(500)
  roles       Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(500)  // ví dụ: STUDENT, TEACHER, ADMIN
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

// =========================
// Domain giáo dục 1–1
// =========================

// Kỹ năng & mapping kỹ năng cho giáo viên
model Skill {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(100) // e.g. "IELTS_SPEAKING"
  name      String   @db.VarChar(500)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teachers  TeacherSkill[]
}

model TeacherSkill {
  // Join table TeacherProfile - Skill
  teacherId Int
  skillId   Int
  level     Int      @default(3) // 1-5

  teacher   TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  skill     Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([teacherId, skillId])
}

// Hồ sơ giáo viên
model TeacherProfile {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  bio          String   @default("") @db.VarChar(2000)
  hourlyRate   Decimal  @db.Decimal(10,2)
  introVideo   String?  @db.VarChar(1000)
  headline     String?  @db.VarChar(500)
  timezone     String   @default("Asia/Ho_Chi_Minh") @db.VarChar(100)

  skills       TeacherSkill[]
  availRules   AvailabilityRule[]
  lessonsAsTeacher Lesson[] @relation("TeacherLessons")
  timeSlots   TimeSlot[]

  ratingAvg    Float?
  ratingCount  Int     @default(0)

  createdById  Int?
  createdBy    User?   @relation("TeacherProfileCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById  Int?
  updatedBy    User?   @relation("TeacherProfileUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedById  Int?
  deletedBy    User?   @relation("TeacherProfileDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull)

  deletedAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([deletedAt])
}

// Rule lịch rảnh hàng tuần (pattern)
model AvailabilityRule {
  id            Int             @id @default(autoincrement())
  teacherId     Int
  teacher       TeacherProfile  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  weekday       Weekday
  startTimeMins Int             // phút từ 00:00 (theo timezone của giáo viên)
  endTimeMins   Int             // exclusive
  isActive      Boolean         @default(true)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Slot cụ thể theo ngày để book
model TimeSlot {
  id          Int             @id @default(autoincrement())
  teacherId   Int
  teacher     TeacherProfile  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  startTime   DateTime
  endTime     DateTime
  isBooked    Boolean         @default(false)

  // liên kết 1-1 tới lesson (nếu đã book)
  lessonId    Int?            @unique
  lesson      Lesson?         @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  createdAt   DateTime        @default(now())

  @@unique([teacherId, startTime, endTime])
  @@index([startTime])
  @@index([isBooked])
}

// Buổi học (lesson/booking)
model Lesson {
  id          Int           @id @default(autoincrement())
  studentId   Int
  teacherId   Int
  startTime   DateTime
  endTime     DateTime
  isTrial     Boolean       @default(false)
  status      LessonStatus  @default(PENDING)
  notes       String?       @db.VarChar(2000)

  student     User           @relation("StudentLessons", fields: [studentId], references: [id], onDelete: Cascade)
  teacher     TeacherProfile @relation("TeacherLessons", fields: [teacherId], references: [id], onDelete: NoAction)

  // liên kết ngược từ TimeSlot (TimeSlot.lessonId)
  timeSlot    TimeSlot?

  createdById Int?
  createdBy   User?          @relation("LessonCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User?          @relation("LessonUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedById Int?
  deletedBy   User?          @relation("LessonDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull)

  deletedAt   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([teacherId, startTime])
  @@index([studentId, startTime])
  @@index([status])
  @@index([deletedAt])
}

// Gói học & sở hữu gói
model Package {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(500)
  description  String   @default("")
  totalLessons Int
  price        Decimal  @db.Decimal(10,2)
  isActive     Boolean  @default(true)

  createdById  Int?
  createdBy    User? @relation("PackageCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById  Int?
  updatedBy    User? @relation("PackageUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedById  Int?
  deletedBy    User? @relation("PackageDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull)

  // Opposite relation field for StudentPackage
  studentPackages StudentPackage[]

  deletedAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([deletedAt])
}

model StudentPackage {
  id               Int      @id @default(autoincrement())
  studentId        Int
  packageId        Int
  remainingLessons Int
  purchasedAt      DateTime @default(now())

  student   User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  package   Package @relation(fields: [packageId], references: [id], onDelete: NoAction)

  @@index([studentId])
  @@index([packageId])
}




